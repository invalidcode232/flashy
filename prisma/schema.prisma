generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  flashcard_history flashcard_history[]
  collections       collections[]
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model collections {
  id     Int    @id @default(autoincrement())
  name   String @db.VarChar(50)
  userId String

  flashcard flashcards[]
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model flashcards {
  id            Int     @id @default(autoincrement())
  collection_id Int
  question      String  @db.VarChar(300)
  is_multiple   Boolean

  collection        collections         @relation(fields: [collection_id], references: [id], onDelete: Cascade)
  choices flashcard_choices[]
  history flashcard_history[]
}

model flashcard_choices {
  id           Int     @id @default(autoincrement())
  flashcard_id Int
  is_correct   Boolean
  choice       String  @db.VarChar(100)

  flashcard flashcards @relation(fields: [flashcard_id], references: [id], onDelete: Cascade)
}

model flashcard_history {
  id            Int      @id @default(autoincrement())
  userId        String
  flashcard_id  Int
  last_answered DateTime @db.Timestamptz(6)
  last_correct  Boolean

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  flashcard flashcards @relation(fields: [flashcard_id], references: [id], onDelete: Cascade)
}
